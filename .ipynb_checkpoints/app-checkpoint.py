{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba608659-eb6d-4013-b12a-e0be94f33399",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "# Load the trained model\n",
    "with open(\"random_forest_model.pkl\", \"rb\") as file:\n",
    "    model = pickle.load(file)\n",
    "\n",
    "st.set_page_config(page_title=\"Telco Churn Predictor\", layout=\"centered\")\n",
    "\n",
    "st.title(\"Telco Customer Churn Prediction\")\n",
    "st.markdown(\"Fill out the customer info to predict if they might churn.\")\n",
    "\n",
    "# Example Telco input fields (adjust to your dataset columns!)\n",
    "gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n",
    "senior = st.radio(\"Senior Citizen\", [\"Yes\", \"No\"])\n",
    "partner = st.radio(\"Has Partner?\", [\"Yes\", \"No\"])\n",
    "dependents = st.radio(\"Has Dependents?\", [\"Yes\", \"No\"])\n",
    "tenure = st.slider(\"Tenure (Months)\", 0, 72, 12)\n",
    "phone_service = st.radio(\"Phone Service\", [\"Yes\", \"No\"])\n",
    "internet_service = st.selectbox(\"Internet Service\", [\"DSL\", \"Fiber optic\", \"No\"])\n",
    "monthly_charges = st.slider(\"Monthly Charges\", 0.0, 150.0, 70.0)\n",
    "total_charges = st.slider(\"Total Charges\", 0.0, 10000.0, 2000.0)\n",
    "contract = st.selectbox(\"Contract Type\", [\"Month-to-month\", \"One year\", \"Two year\"])\n",
    "paperless_billing = st.radio(\"Paperless Billing?\", [\"Yes\", \"No\"])\n",
    "payment_method = st.selectbox(\"Payment Method\", [\n",
    "    \"Electronic check\", \"Mailed check\", \"Bank transfer (automatic)\", \"Credit card (automatic)\"\n",
    "])\n",
    "\n",
    "# Encode categorical variables manually (must match your model's encoding!!)\n",
    "data = {\n",
    "    \"gender\": 1 if gender == \"Male\" else 0,\n",
    "    \"SeniorCitizen\": 1 if senior == \"Yes\" else 0,\n",
    "    \"Partner\": 1 if partner == \"Yes\" else 0,\n",
    "    \"Dependents\": 1 if dependents == \"Yes\" else 0,\n",
    "    \"tenure\": tenure,\n",
    "    \"PhoneService\": 1 if phone_service == \"Yes\" else 0,\n",
    "    \"InternetService_DSL\": 1 if internet_service == \"DSL\" else 0,\n",
    "    \"InternetService_Fiber optic\": 1 if internet_service == \"Fiber optic\" else 0,\n",
    "    \"InternetService_No\": 1 if internet_service == \"No\" else 0,\n",
    "    \"MonthlyCharges\": monthly_charges,\n",
    "    \"TotalCharges\": total_charges,\n",
    "    \"Contract_Month-to-month\": 1 if contract == \"Month-to-month\" else 0,\n",
    "    \"Contract_One year\": 1 if contract == \"One year\" else 0,\n",
    "    \"Contract_Two year\": 1 if contract == \"Two year\" else 0,\n",
    "    \"PaperlessBilling\": 1 if paperless_billing == \"Yes\" else 0,\n",
    "    \"PaymentMethod_Electronic check\": 1 if payment_method == \"Electronic check\" else 0,\n",
    "    \"PaymentMethod_Mailed check\": 1 if payment_method == \"Mailed check\" else 0,\n",
    "    \"PaymentMethod_Bank transfer (automatic)\": 1 if payment_method == \"Bank transfer (automatic)\" else 0,\n",
    "    \"PaymentMethod_Credit card (automatic)\": 1 if payment_method == \"Credit card (automatic)\" else 0,\n",
    "}\n",
    "\n",
    "input_df = pd.DataFrame([data])\n",
    "\n",
    "# Predict churn\n",
    "if st.button(\"Predict\"):\n",
    "    prediction = model.predict(input_df)[0]\n",
    "    if prediction == 1:\n",
    "        st.error(\"ðŸš¨ The customer is likely to **CHURN**.\")\n",
    "    else:\n",
    "        st.success(\"âœ… The customer is likely to **STAY**.\")\n",
    "\n",
    "st.markdown(\"---\")\n",
    "st.caption(\"Built by Siddhika\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
